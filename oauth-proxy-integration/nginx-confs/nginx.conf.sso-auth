worker_processes  1;

error_log /dev/stderr $NGINX_ERROR_LOG_LEVEL;

events {
    worker_connections 1024;
}

http {

    log_format main '$time_iso8601 AUDIT $uid 1 nginx access_log'
                    ' {"@message":"$remote_addr - $remote_user [$time_local] $request'
                    ' $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for"}';

    access_log /dev/stdout main;

    lua_package_path "/usr/local/openresty/lualib/?.lua;;";

    init_by_lua_block {
        auth = require "auth".init()
    }

    server {
        listen 443 ssl;
        ssl_certificate     /etc/pki/proxy.pem;
        ssl_certificate_key /etc/pki/proxy.key;

        set $uid '-';
        set $groups '';
        set $tenant '';
        set $err '';
        set $response_body '';

        location / {
            access_by_lua_block {
                auth.validate_jwt_or_login();
            }

            proxy_set_header  X-DCOS-OAUTH-USER $uid;
            proxy_set_header  X-DCOS-OAUTH-GROUPS $groups;
            proxy_set_header  X-DCOS-OAUTH-TENANT $tenant;

            proxy_read_timeout ${PROXY_READ_TIMEOUT}s;
            proxy_pass http://127.0.0.1:3000;
        }

        # These endpoints are not authenticated (see metabase/routes.clj )
        location ~ ^/(favicon.ico|app|public|embed) {
            proxy_read_timeout ${PROXY_READ_TIMEOUT}s;
            proxy_pass http://127.0.0.1:3000;
        }

        # These api endpints are not authenticated (see metabase/api/routes.clj)
        # session is also public in metabase but we must restrict access when using sso
        # since in the metabase end we are just looking for some headers
        # session/properties though we keep it open just in case these (public) properties are needed
        location ~ ^/api/(embed|geojson|public|setup|util|session/properties) {
            # TODO: try to get user from jwt token also in these public enpoints but if
            # token not found just set uid to '-' instead of redirecting to login
            proxy_read_timeout ${PROXY_READ_TIMEOUT}s;
            proxy_pass http://127.0.0.1:3000;
        }


        location /api/health {
            proxy_pass http://127.0.0.1:3000;
        }


        location /discovery-cicd {
            proxy_read_timeout ${PROXY_READ_TIMEOUT}s;
            proxy_pass http://127.0.0.1:8087;
        }


        # login / logout for dcos-oauth (proxy authentication)
        location ~ ^/(login|logout) {
            proxy_pass http://127.0.0.1:8081;
        }

    }

    # This server is needed for health check purposes
    # TODO: once we open the health location these might not be needed
    server {
        listen 3009;
        set $uid '-';

        location "/api/health" {
            proxy_pass http://127.0.0.1:3000;
        }
    }

}
